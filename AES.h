//
// Created by guy on 3/29/21.
//

#ifndef COSC370_PROJECT_AESOBJ_H
#define COSC370_PROJECT_AESOBJ_H

#include <unordered_map>
#include <cstdint>

class AesObj {
    AesObj();
    ~AesObj();

//    state table
    unsigned char state[4][4] = {0};

//    original input data
    unsigned char * input = nullptr;

//    how many bytes are in the input
    int inputLength = 0;


//    128 bit key used to encrypt the data
    unsigned char key[16] = {0};



    const unordered_map<uint8_t , uint8_t> sBox = {
            {0x00, 0x63}, {0x01, 0x7c},{0x02, 0x77}, {0x03, 0x7b},{0x04, 0xf2}, {0x05, 0x6b},{0x06, 0x6f}, {0x07, 0xc5}, {0x08, 0x30}, {0x09, 0x01},
            {0x0a, 0x67}, {0x0b , 0x2b}, {0x0c , 0xfe}, {0x0d , 0xd7},  {0x0e , 0xab}, {0x0f , 0x76}, {0x10 , 0xca}, {0x11 , 0x82}, {0x12 , 0xc9}, {0x13 , 0x7d},
            {0x14 , 0xfa}, {0x15 , 0x59}, {0x16 , 0x47}, {0x17 , 0xf0},  {0x18 , 0xad}, {0x19 , 0xd4}, {0x1a , 0xa2}, {0x1b , 0xaf}, {0x1c , 0x9c}, {0x1d , 0xa4},
            {0x1e , 0x72}, {0x1f , 0xc0}, {0x20 , 0xb7}, {0x21 , 0xfd},  {0x22 , 0x93}, {0x23 , 0x26}, {0x24 , 0x36}, {0x25 , 0x3f}, {0x26 , 0xf7}, {0x27 , 0xcc},
            {0x28 , 0x34}, {0x29 , 0xa5}, {0x2a , 0xe5}, {0x2b , 0xf1},  {0x2c , 0x71}, {0x2d , 0xd8}, {0x2e , 0x31}, {0x2f , 0x15}, {0x30 , 0x04}, {0x31 , 0xc7},
            {0x32 , 0x23}, {0x33 , 0xc3}, {0x34 , 0x18}, {0x35 , 0x96},  {0x36 , 0x05}, {0x37 , 0x9a}, {0x38 , 0x07}, {0x39 , 0x12}, {0x3a , 0x80}, {0x3b , 0xe2},
            {0x3c , 0xeb}, {0x3d , 0x27}, {0x3e , 0xb2}, {0x3f , 0x75},  {0x40 , 0x09}, {0x41 , 0x83}, {0x42 ,0x2c }, {0x43 ,0x1a }, {0x44 ,0x1b }, {0x45 ,0x6e },
            {0x46 ,0x5a }, {0x47 , 0xa0}, {0x48 , 0x52}, {0x49 ,0x3b },  {0x4a ,0xd6 }, {0x4b ,0xb3 }, {0x4c ,0x29 }, {0x4d ,0xe3 }, {0x4e ,0x2f }, {0x4f ,0x84 },
            {0x50 , 0x53}, {0x51 ,0xd1 }, {0x52 ,0x00 }, {0x53 ,0xed },  {0x54 ,0x20 }, {0x55 ,0xfc }, {0x56 ,0xb1 }, {0x57 ,0x5b }, {0x58 ,0x6a }, {0x59 ,0xcb },
            {0x5a ,0xbe }, {0x5b ,0x39 }, {0x5c ,0x4a }, {0x5d ,0x4c },  {0x5e ,0x58 }, {0x5f ,0xcf }, {0x60 , 0xd0}, {0x61 ,0xef }, {0x62 ,0xaa }, {0x63 ,0xfb },
            {0x64 ,0x43 }, {0x65 ,0x4d }, {0x66 ,0x33 }, {0x67 ,0x85 },  {0x68 ,0x45 }, {0x69 ,0xf9 }, {0x6a ,0x02 }, {0x6b , 0x7f}, {0x6c ,0x50 }, {0x6d ,0x3c },
            {0x6e ,0x9f }, {0x6f ,0xa8 }, {0x70 ,0x51 }, {0x71 ,0xa3 },  {0x72 ,0x40 }, {0x73 ,0x8f }, {0x74 ,0x92 }, {0x75 ,0x9d }, {0x76 ,0x38 }, {0x77 ,0xf5 },
            {0x78 ,0xbc }, {0x79 ,0xb6 }, {0x7a ,0xda }, {0x7b ,0x21 },  {0x7c ,0x10 }, {0x7d ,0xff }, {0x7e ,0xf3 }, {0x7f ,0xd2 }, {0x80 , 0xcd}, {0x81 , 0x0c},
            {0x82 , 0x13}, {0x83 ,0xec }, {0x84 ,0x5f }, {0x85 ,0x97 },  {0x86 ,0x44 }, {0x87 ,0x17 }, {0x88 ,0xc4 }, {0x89 ,0xa7 }, {0x8a ,0x7e }, {0x8b ,0x3d },
            {0x8c ,0x64 }, {0x8d ,0x5d }, {0x8e ,0x19 }, {0x8f ,0x73 },  {0x90 , 0x60}, {0x91 ,0x81 }, {0x92 ,0x4f }, {0x93 ,0xdc }, {0x94 ,0x22 }, {0x95 ,0x2a },
            {0x96 ,0x90 }, {0x97 ,0x88 }, {0x98 ,0x46 }, {0x99 ,0xee },  {0x9a ,0xb8 }, {0x9b ,0x14 }, {0x9c ,0xde }, {0x9d ,0x5e }, {0x9e ,0x0b }, {0x9f ,0xdb },
            {0xa0 , 0xe0}, {0xa1 , 0x32}, {0xa2 ,0x3a }, {0xa3 ,0x0a },  {0xa4 ,0x49 }, {0xa5 ,0x06 }, {0xa6 ,0x24 }, {0xa7 ,0x5c }, {0xa8 ,0xc2 }, {0xa9 ,0xd3 },
            {0xaa ,0xac }, {0xab ,0x62 }, {0xac ,0x91 }, {0xad ,0x95 },  {0xae ,0xe4 }, {0xaf ,0x79 }, {0xb0 , }, {0xb1 , }, {0xb2 , }, {0xb3 , },
            {0xb4 , }, {0xb5 , }, {0xb6 , }, {0xb7 , },  {0xb8 , }, {0xb9 , }, {0xba , }, {0xbb , }, {0xbc , }, {0xbd , },
            {0xbe , }, {0xbf , }, {0xc0 , }, {0xc1 , },  {0xc2 , }, {0xc3 , }, {0xc4 , }, {0xc5 , }, {0xc6 , }, {0xc7 , },
            {0xc8 , }, {0xc9 , }, {0xca , }, {0xcb , },  {0xcc , }, {0xcd , }, {0xce , }, {0xcf , }, {0xd0 , }, {0xd1 , },
            {0xd2 , }, {0xd3 , }, {0xd4 , }, {0xd5 , },  {0xd6 , }, {0xd7 , }, {0xd8 , }, {0xd9 , }, {0xda , }, {0xdb , },
            {0xdc , }, {0xdd , }, {0xde , }, {0xdf , },  {0xe1 , }, {0xe2 , }, {0xe3 , }, {0xe4 , }, {0xe5 , }, {0xe6 , },
            {0xe7 , }, {0xe8 , }, {0xe9 , }, {0xea , },  {0xeb , }, {0xec , }, {0xed , }, {0xee , }, {0xef , }, {0xf0 , },
            {0xf1 , }, {0xf2 , }, {0xf3 , }, {0xf4 , },  {0xf5 , }, {0xf6 , }, {0xf7 , }, {0xf8 , }, {0xf9 , }, {0xfa , },
            {0xfb , }, {0xfc , }, {0xfd , }, {0xfe , },  {0xff , }, { , }, { , }, { , }, { , }, { , },
            { , }, { , }, { , }, { , },  { , }, { , }, { , }, { , }, { , }, { , },
            { , }, { , }, { , }, { , },  { , }, { , }, { , }, { , }, { , }, { , },



    };

/*
    return value: unsigned char array containing encrypted bytes
    parameters:
      unsigned char * containing the bytes to encrypt
      int representing how many bytes are in the input
      unsigned char * containing the encryption key to use

    description:
      takes the bytes from the input date given, uses the bytes from the key given, and returns the encrypted version
      of the input data.

 */
    unsigned char * encrypt(unsigned char * , int, unsigned char *);

/*

    return value: none
    parameters:
      unsigned char * containing the input
      int representing how many bytes are in the input
      unsigned char [] containing the state table

    description:
      copies the bytes from the input data given and copies the data onto the state table
*/
    void copyInputToState(unsigned char * , int, unsigned  char []);


/*

    return value: none
    parameters:
      unsigned char * containing the input data that needs to be padded
      int representing how many bytes are in the input


    description:
      This function will pad the input using the PKCS# 7
      In this standard, you just pad bytes that contain the value of how many bytes were added
      E.G. If 6 bytes is added to the last block to make it get to 128 bits, you add the bytes
      06 06 06 06 06 06
      If the data given is a multiple of the block size, an extra block is added with 16 bytes of 16's
      so the decrypting algorithm can determine if padding occurred
*/
    void padInput(unsigned char *, int);






};


#endif //COSC370_PROJECT_AESOBJ_H
